#ifndef GFX_H
#define GFX_H

/* Low-level rendering Header */

#include <SDL2/SDL.h>
#include <SDL2/SDL_image.h>
#include <stdint.h>
#include "./util/common.h"
#include "./resource/res_handler.h"
#include "./resource/palette.h"
#include "./util/vec.h"

#define GFX_SCREEN_WIDTH 256
#define GFX_SCREEN_HEIGHT 144 
#define GFX_SCREEN_TILES_HOR (GFX_SCREEN_WIDTH/16)
#define GFX_SCREEN_TILES_VERT (GFX_SCREEN_HEIGHT/16)
#define GFX_SCREEN_TILES_HOR_H (GFX_SCREEN_TILES_HOR/2)
#define GFX_SCREEN_TILES_VERT_H (GFX_SCREEN_TILES_VERT/2)

enum {
  GFX_SPRITE_NONE=0,
  GFX_SPRITE_GRASS_A,
  GFX_SPRITE_GRASS_B,
  GFX_SPRITE_GRASS_C,
  GFX_SPRITE_GRASS_PATH_V,
  GFX_SPRITE_GRASS_PATH_H,
  GFX_SPRITE_GRASS_PATH_VTE,
  GFX_SPRITE_GRASS_PATH_HRE,
  GFX_SPRITE_GRASS_PATH_VBE,
  GFX_SPRITE_GRASS_PATH_HLE,
  GFX_SPRITE_GRASS_PATH_D1,
  GFX_SPRITE_GRASS_PATH_D2,
  GFX_SPRITE_GRASS_PATH_D3,
  GFX_SPRITE_GRASS_PATH_D4,
  GFX_SPRITE_GRASS_SAND_TL,
  GFX_SPRITE_GRASS_SAND_L,
  GFX_SPRITE_GRASS_SAND_BL,
  GFX_SPRITE_GRASS_SAND_T,
  GFX_SPRITE_GRASS_SAND,
  GFX_SPRITE_GRASS_SAND_B,
  GFX_SPRITE_GRASS_SAND_TR,
  GFX_SPRITE_GRASS_SAND_R,
  GFX_SPRITE_GRASS_SAND_BR,
  GFX_SPRITE_GRASS_FLOWER_A,
  GFX_SPRITE_GRASS_FLOWER_B,
  GFX_SPRITE_GRASS_FLOWER_C,
  GFX_SPRITE_WATER_1,
  GFX_SPRITE_WATER_2,
  GFX_SPRITE_WATER_3,
  GFX_SPRITE_WATER_4,
  GFX_SPRITE_GRASS_WATER_TL,
  GFX_SPRITE_GRASS_WATER_L,
  GFX_SPRITE_GRASS_WATER_BL,
  GFX_SPRITE_GRASS_WATER_T,
  GFX_SPRITE_GRASS_WATER_B,
  GFX_SPRITE_GRASS_WATER_TR,
  GFX_SPRITE_GRASS_WATER_R,
  GFX_SPRITE_GRASS_WATER_BR,
  GFX_SPRITE_FLOWER_1,
  GFX_SPRITE_FLOWER_2,
  GFX_SPRITE_FLOWER_3,
  GFX_SPRITE_DUSTBALL_1,
  GFX_SPRITE_DUSTBALL_2,
  GFX_SPRITE_DUSTBALL_3,
  GFX_SPRITE_DUSTBALL_4,
  GFX_SPRITE_TREE,
  GFX_SPRITE_TREE_PACK_A,
  GFX_SPRITE_TREE_PACK_B,
  GFX_SPRITE_PRINCESS_IDLE_D,
  GFX_SPRITE_PRINCESS_IDLE_U,
  GFX_SPRITE_PRINCESS_IDLE_R,
  GFX_SPRITE_PRINCESS_IDLE_L,
  GFX_SPRITE_CAN_IDLE_D,
  GFX_SPRITE_CAN_IDLE_D_2,
  GFX_SPRITE_CAN_IDLE_U,
  GFX_SPRITE_CAN_IDLE_R,
  GFX_SPRITE_CAN_IDLE_L,
  GFX_SPRITE_CAN_RUN_D_1,
  GFX_SPRITE_CAN_RUN_D_2,
  GFX_SPRITE_CAN_RUN_D_3,
  GFX_SPRITE_CAN_RUN_D_4,
  GFX_SPRITE_CAN_RUN_D_5,
  GFX_SPRITE_CAN_RUN_D_6,
  GFX_SPRITE_CAN_RUN_U_1,
  GFX_SPRITE_CAN_RUN_U_2,
  GFX_SPRITE_CAN_RUN_U_3,
  GFX_SPRITE_CAN_RUN_U_4,
  GFX_SPRITE_CAN_RUN_U_5,
  GFX_SPRITE_CAN_RUN_U_6,
  GFX_SPRITE_CAN_RUN_R_1,
  GFX_SPRITE_CAN_RUN_R_2,
  GFX_SPRITE_CAN_RUN_R_3,
  GFX_SPRITE_CAN_RUN_R_4,
  GFX_SPRITE_CAN_RUN_R_5,
  GFX_SPRITE_CAN_RUN_R_6,
  GFX_SPRITE_CAN_RUN_L_1,
  GFX_SPRITE_CAN_RUN_L_2,
  GFX_SPRITE_CAN_RUN_L_3,
  GFX_SPRITE_CAN_RUN_L_4,
  GFX_SPRITE_CAN_RUN_L_5,
  GFX_SPRITE_CAN_RUN_L_6,
  GFX_SPRITE_CAN_ROLL_U_1,
  GFX_SPRITE_CAN_ROLL_U_2,
  GFX_SPRITE_CAN_ROLL_U_3,
  GFX_SPRITE_CAN_ROLL_U_4,
  GFX_SPRITE_CAN_ROLL_U_5,
  GFX_SPRITE_CAN_ROLL_U_6,
  GFX_SPRITE_CAN_ROLL_U_7,
  GFX_SPRITE_CAN_ROLL_U_8,
  GFX_SPRITE_CAN_ROLL_U_9,
  GFX_SPRITE_CAN_ROLL_R_1,
  GFX_SPRITE_CAN_ROLL_R_2,
  GFX_SPRITE_CAN_ROLL_R_3,
  GFX_SPRITE_CAN_ROLL_R_4,
  GFX_SPRITE_CAN_ROLL_R_5,
  GFX_SPRITE_CAN_ROLL_R_6,
  GFX_SPRITE_CAN_ROLL_R_7,
  GFX_SPRITE_CAN_ROLL_R_8,
  GFX_SPRITE_CAN_ROLL_R_9,
  GFX_SPRITE_CAN_ROLL_D_1,
  GFX_SPRITE_CAN_ROLL_D_2,
  GFX_SPRITE_CAN_ROLL_D_3,
  GFX_SPRITE_CAN_ROLL_D_4,
  GFX_SPRITE_CAN_ROLL_D_5,
  GFX_SPRITE_CAN_ROLL_D_6,
  GFX_SPRITE_CAN_ROLL_D_7,
  GFX_SPRITE_CAN_ROLL_D_8,
  GFX_SPRITE_CAN_ROLL_D_9,
  GFX_SPRITE_CAN_ROLL_L_1,
  GFX_SPRITE_CAN_ROLL_L_2,
  GFX_SPRITE_CAN_ROLL_L_3,
  GFX_SPRITE_CAN_ROLL_L_4,
  GFX_SPRITE_CAN_ROLL_L_5,
  GFX_SPRITE_CAN_ROLL_L_6,
  GFX_SPRITE_CAN_ROLL_L_7,
  GFX_SPRITE_CAN_ROLL_L_8,
  GFX_SPRITE_CAN_ROLL_L_9,
  GFX_SPRITE_HEART, 
  GFX_SPRITE_HEART_HALF,
  GFX_SPRITE_NO_HEART,
  GFX_SPRITE_GOLD_HEART_1,
  GFX_SPRITE_GOLD_HEART_2,
  GFX_SPRITE_GOLD_HEART_3,
  GFX_SPRITE_GOLD_HEART_4,
  GFX_SPRITE_GOLD_HEART_HALF_1,
  GFX_SPRITE_GOLD_HEART_HALF_2,
  GFX_SPRITE_GOLD_HEART_HALF_3,
  GFX_SPRITE_GOLD_HEART_HALF_4,
  GFX_SPRITE_NO_STAMINA_L,
  GFX_SPRITE_NO_STAMINA_M,
  GFX_SPRITE_NO_STAMINA_R,
  GFX_SPRITE_STAMINA_L, 
  GFX_SPRITE_STAMINA_M,
  GFX_SPRITE_STAMINA_R,
  GFX_SPRITE_SMALL_HEART, 
  GFX_SPRITE_SMALL_HEART_HALF,
  GFX_SPRITE_SMALL_NO_HEART,
  GFX_SPRITE_SMALL_GOLD_HEART_1,
  GFX_SPRITE_SMALL_GOLD_HEART_2,
  GFX_SPRITE_SMALL_GOLD_HEART_3,
  GFX_SPRITE_SMALL_GOLD_HEART_4,
  GFX_SPRITE_SMALL_GOLD_HEART_HALF_1,
  GFX_SPRITE_SMALL_GOLD_HEART_HALF_2,
  GFX_SPRITE_SMALL_GOLD_HEART_HALF_3,
  GFX_SPRITE_SMALL_GOLD_HEART_HALF_4,
  GFX_SPRITE_SMALL_NO_STAMINA_L,
  GFX_SPRITE_SMALL_NO_STAMINA_M,
  GFX_SPRITE_SMALL_NO_STAMINA_R,
  GFX_SPRITE_SMALL_STAMINA_L,
  GFX_SPRITE_SMALL_STAMINA_M,
  GFX_SPRITE_SMALL_STAMINA_R,

  GFX_SPRITE_MAX_ID,
}; 
typedef uint16_t gfx_sprite_code_t;

typedef struct {
  uint16_t x,y,w,h;
} gfx_sprite_info;

typedef struct {
  SDL_Window* window;
  SDL_Renderer* renderer;
  SDL_Texture* spritesheet;
  gfx_sprite_info* si_array; // sprite info array
} gfx_tool_t;

gfx_tool_t* gfx_init();
void gfx_destroy(gfx_tool_t*);
void gfx_clear(gfx_tool_t* t);
void gfx_draw_rect_a(gfx_tool_t* t, int32_t x, int32_t y, int32_t w, int32_t h,
                     uint8_t r, uint8_t g, uint8_t b, uint8_t a);
void gfx_draw_rect(gfx_tool_t* t, int32_t x, int32_t y, int32_t w, int32_t h,
                   uint8_t r, uint8_t g, uint8_t b); 
void gfx_fill_rect_a(gfx_tool_t* t, int32_t x, int32_t y, int32_t w, int32_t h,
                     uint8_t r, uint8_t g, uint8_t b, uint8_t a);
void gfx_fill_rect(gfx_tool_t* t, int32_t x, int32_t y, int32_t w, int32_t h, 
                   uint8_t r, uint8_t g, uint8_t b); 
void gfx_draw_point_a(gfx_tool_t* t, int32_t x, int32_t y, 
                      uint8_t r, uint8_t g, uint8_t b, uint8_t a);
void gfx_draw_point(gfx_tool_t* t, int32_t x, int32_t y, 
                    uint8_t r, uint8_t g, uint8_t b); 
// p = paletted
void gfx_draw_point_c16_split(gfx_tool_t* t, int32_t x, int32_t y, 
                              uint8_t ref, uint8_t a);
void gfx_render_sprite_i(gfx_tool_t* t, uint16_t si_index, int32_t x, int32_t y);
void gfx_render_sprite_xy(gfx_tool_t* t, gfx_sprite_info si, 
                          int32_t x, int32_t y);

void gfx_delay(uint32_t d);
void gfx_commit(gfx_tool_t* t);

#endif 